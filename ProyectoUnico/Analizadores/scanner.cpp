#line 1 "scanner.cpp"

#line 3 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[434] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       96,   89,    4,    6,    5,   28,   89,   37,   89,   89,
       35,   36,   32,   30,   41,   31,   11,   33,    9,   57,
       42,   21,   40,   23,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   44,   45,   34,   38,   89,   39,   95,   93,   95,
       91,   95,   95,    0,   20,    0,    0,    8,   26,    0,
        7,    0,    3,    2,    0,    9,   22,   19,   24,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   46,   88,
       88,   88,   88,   25,   94,   92,   90,   27,   29,   10,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   55,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   49,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   48,   88,

       88,   88,   88,   82,   88,   88,   88,   88,   88,   74,
       88,   88,   88,   88,   88,   88,   88,   13,   88,   88,
       18,   88,   88,   52,   88,   88,   88,   88,   88,   77,
       88,   88,   88,   88,   88,   88,   88,   88,   54,    0,
       88,   88,   88,   88,   88,   88,   88,   14,   88,   88,
       88,   88,   88,   88,   88,   88,   66,   88,   88,   12,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   58,    0,   88,   88,   88,
       88,   60,   43,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   56,   88,   88,   87,   88,   88,   84,

        1,   88,   88,   88,   80,   88,   79,   50,   88,   88,
       47,   88,   88,   88,   88,   16,   15,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   75,   88,   85,   51,
       88,   88,   88,   88,   83,   88,   88,   88,   88,   53,
       88,   59,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   76,   81,   88,   88,   88,   17,   88,   88,   88,
       88,   88,   88,   63,   88,   88,   88,   88,   88,   88,
       73,   88,   88,   88,   88,   67,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   64,   88,   88,
       88,   88,   70,   78,   88,   88,   88,   62,   88,   88,

       88,   88,   88,   88,   88,   88,   65,   88,   88,   88,
       72,   61,   69,   88,   88,   68,   88,   88,   88,   88,
       88,   88,   88,   86,   88,   88,   88,   88,   88,   88,
       88,   71,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    1,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    1,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       36,   42,   43,   44,   45,   46,   36,   47,   36,   36,
       48,   49,   50,   51,   52,    1,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   62,   36,   63,   64,   65,
       66,   67,   36,   68,   69,   70,   71,   72,   36,   73,
       36,   36,   74,   75,   76,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   36,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   36,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   36,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1,    1
    } ;

static const flex_int16_t yy_base[441] =
    {   0,
        0,    0,  263,  230,   74,   75,    0,    0,    0,    0,
      230, 1669, 1669, 1669, 1669,   69,   77, 1669,  218,   70,
     1669, 1669, 1669, 1669, 1669, 1669, 1669,   68,   66, 1669,
     1669,  203,  201,  190,   63,   70,  125,   71,   74,   72,
       75,   77,   96,   80,  129,   88,  130,  154,  179,  134,
      177, 1669, 1669, 1669, 1669,  135, 1669,  186, 1669,  158,
     1669,   77, 1669,  163, 1669,   91,   99, 1669, 1669,  153,
     1669,  147, 1669, 1669,  137,   86, 1669, 1669, 1669,   89,
      133,  184,  135,  169,  195,  196,  203,  224,  226,  230,
      233,  148,  242,  237,  238,  239,  252,  264,  281,  278,

      250,  291,  276,  286,  297,  312,  275,  309,  302,  338,
      342,  317,  337, 1669, 1669, 1669, 1669, 1669, 1669,  122,
      151,  350,  354,  356,  357,  360,  376,  377,  380,  379,
      381,  385,  405,  416,  406,  421,  424,  418,  425,  432,
      445,  443,  446,  420,  440,  447,  466,  468,  476,  481,
      487,  483,  490,  503,  506,  510,  509,  511,  507,  536,
      525,  532,  544,  537,  548,  554,  314,  560,  563,  566,
      582,  578,  575,  571,  581,  584,  587,  601,  602,  615,
      618,  631,  628,  632,  641,  612,  639,  638,  407,  643,
      659,  666,  667,  672,  668,  680,  695,  685,  711,  709,

      693,  688,  713,  419,  718,  706,  729,  731,  715,  484,
      734,  736,  740,  767,  776,  760,  755,  558,  771,  786,
      605,  774,  801,  608,  793,  798,  813,  816,  821,  645,
      826,  823,  824,  841,  828,  829,  843,  850,  726,   69,
      847,  857,  865,  852,  871,  880,  883,  756,  899,  887,
      890,  881,  886,  905,  910,  933,  892,  907,  935,  916,
      944,  941,  946,  947,  950,  952,  957,  971,  945,  980,
      983,  991,  974,  999, 1008, 1001,  118, 1010, 1017, 1020,
     1021, 1004, 1016, 1035, 1028, 1032, 1062, 1066, 1039, 1051,
     1069, 1058, 1061, 1043, 1078, 1080, 1059, 1086, 1085, 1077,

     1088, 1103, 1097, 1115, 1104, 1105, 1113, 1122, 1124, 1131,
     1669, 1138, 1139, 1140, 1144, 1123, 1125, 1146, 1151, 1158,
     1169, 1166, 1165, 1185, 1192, 1189, 1127, 1191, 1195, 1132,
     1196, 1203, 1212, 1204, 1193, 1234, 1238, 1230, 1249, 1215,
     1251, 1222, 1253, 1231, 1240, 1255, 1257, 1260, 1269, 1274,
     1291, 1273, 1280, 1298, 1293, 1299, 1302, 1303, 1307, 1314,
     1318, 1320, 1319, 1313, 1324, 1329, 1348, 1357, 1336, 1359,
     1333, 1362, 1364, 1370, 1379, 1344, 1372, 1382, 1383, 1388,
     1399, 1406, 1395, 1408, 1409, 1421, 1426, 1393, 1423, 1434,
     1444, 1447, 1432, 1448, 1450, 1449, 1452, 1451, 1470, 1465,

     1471, 1490, 1491, 1500, 1487, 1507, 1478, 1516, 1512, 1521,
     1496, 1505, 1514, 1526, 1530, 1517, 1536, 1542, 1543, 1547,
     1552, 1559, 1566, 1555, 1569, 1564, 1570, 1580, 1581, 1582,
     1605, 1588, 1669, 1658, 1660, 1662, 1664, 1666,  116,  112
    } ;

static const flex_int16_t yy_def[441] =
    {   0,
      433,    1,  434,  434,  435,  435,  436,  436,  436,  436,
      433,  433,  433,  433,  433,  433,  437,  433,  433,  438,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  437,  433,  433,  433,
      433,  438,  433,  433,  433,  433,  433,  433,  433,  440,
      439,  439,  440,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  433,  433,  433,  433,  433,  433,  433,
      440,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  433,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  433,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      433,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,    0,  433,  433,  433,  433,  433,  433,  433
    } ;

static const flex_int16_t yy_nxt[1746] =
    {   0,
       12,   13,   14,   13,   13,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   44,   44,   45,   46,   44,
       47,   48,   49,   50,   44,   51,   44,   52,   12,   53,
       54,   12,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   44,   45,   46,   44,   47,   48,   49,   50,
       44,   51,   44,   55,   56,   57,   61,   61,   64,   68,
       71,   73,   80,   75,   68,   76,   74,   62,   62,   80,
       80,   80,   65,   80,   80,  117,   80,   94,  116,   80,

       90,   68,   97,   75,   82,   76,   68,   80,   80,   84,
       91,  277,   92,  121,   83,   80,   95,   81,   72,   96,
       93,   83,   83,   83,   94,   83,   83,   90,   83,   97,
       82,   83,  102,   98,   99,   84,   91,  277,   92,   83,
       83,  120,   95,   66,   80,   96,   93,   83,   80,   80,
       85,  311,   80,   80,   80,  103,  120,   71,  102,   98,
       99,   86,  100,   71,   87,  119,   88,   80,  101,   89,
       80,  104,  118,   80,  105,  111,   83,   85,  311,  116,
       83,   83,  103,  106,   83,   83,   83,   86,   80,  100,
       87,  136,   88,  107,  101,   89,   80,  104,   80,   83,

      105,  111,   83,   80,  108,   83,  112,  115,  124,  114,
      106,  122,  109,   79,   80,   80,  113,  136,  110,  107,
       83,  128,   80,  125,   78,  123,   77,   69,   83,  433,
       83,  108,   59,  112,  124,   83,  126,  127,  122,  109,
      129,  130,  113,   80,  110,   80,   83,   83,  128,   80,
      125,  123,   80,  131,   83,  132,   80,   80,   80,  135,
      133,   80,  126,  127,  140,   59,  129,  130,  433,   80,
      134,   80,  433,  138,  433,   83,  139,   83,  433,  141,
      131,   83,  132,   80,   83,  137,  135,  133,   83,   83,
       83,  140,  146,   83,   80,   80,  134,   80,  433,  138,

       80,   83,  139,   83,  142,   80,  141,  145,  143,  433,
       80,  137,  155,  433,  144,   83,   80,  148,  146,  149,
      147,   80,  433,  151,  433,  150,   83,   83,   80,   83,
      142,   80,   83,   80,  145,  143,   80,   83,  155,  433,
      157,  144,   83,  148,  433,  156,  149,  147,   83,  433,
      151,  150,  152,   83,  153,  154,   80,   80,  160,  433,
       83,   80,  433,   83,  158,   83,  157,  159,   83,   80,
      161,  156,  433,   80,  433,   80,   80,  433,  152,   80,
      153,  154,  162,  163,  160,  166,  165,  433,   83,   83,
      433,  158,  164,   83,  159,   80,   80,  161,   80,   80,

       80,   83,  433,  433,   80,   83,  172,   83,   83,  162,
      163,   83,  166,  165,  433,  167,  433,  433,  164,  168,
      169,  170,  171,  173,   80,   80,   80,   83,   83,  433,
       83,   83,   83,  172,  174,   80,   83,   80,   80,   80,
       80,  167,  176,   80,   80,  168,  169,  170,  171,  173,
      177,   80,  180,  178,  433,  175,   83,   83,   83,   80,
      179,  174,   80,  185,   80,   80,   80,   83,  176,   83,
       83,   83,   83,  181,  182,   83,   83,  177,  186,  180,
      178,  175,  184,   83,  183,   80,  179,   80,  433,  185,
      187,   83,  433,  189,   83,   80,   83,   83,   83,  181,

       80,  182,   80,   80,  186,  433,   80,  433,  184,   80,
      183,  188,  194,  433,  190,  433,  187,   83,  433,   83,
      189,  191,   80,  193,  192,   80,   80,   83,   80,   80,
       80,  433,   83,  195,   83,   83,  433,  188,   83,  194,
      190,   83,  196,  198,   80,  201,  197,  191,  199,  193,
      192,   80,  200,  204,   83,   80,   80,   83,   83,  195,
       83,   83,   83,   80,  202,  205,  207,   80,  196,  203,
      198,  201,  197,   80,  199,  206,   83,   80,  200,   80,
      204,  209,   80,   83,  433,   80,  208,   83,   83,  210,
       80,  202,  205,  207,   80,   83,  203,   80,  216,   83,

       80,   80,  206,   80,  211,   83,   80,  433,  209,   83,
      212,   83,  208,  218,   83,  213,  210,   83,  215,  214,
       80,   80,   83,  217,   80,  216,   83,   80,  219,   83,
      211,   80,   83,   83,   80,   83,  212,   80,   83,  220,
      218,  221,  213,  433,  215,  214,  223,   80,  222,  217,
       80,   80,   83,   83,  219,  228,   83,   80,   80,   83,
       80,  225,   80,   83,   80,  220,   83,  221,  433,   83,
      231,  433,  224,  223,  227,  222,  226,  230,   80,   83,
      229,  228,   83,   83,  232,   80,   80,   80,  225,   83,
       83,   80,   83,  236,   83,  233,   83,  231,  224,   80,

      234,  227,  226,  230,   80,  433,  229,   80,  433,  433,
       83,  232,   80,  243,   80,  235,  240,   83,   83,   83,
      236,  237,  233,   83,  238,   80,  239,  234,   80,  433,
       80,   83,   80,  433,   80,  242,   83,   80,  241,   83,
      243,  235,  246,  244,   83,   80,   83,  237,   80,  433,
       80,  238,  239,   80,  247,   80,  248,   83,  249,   80,
       83,  242,   83,  245,   83,  241,   83,  433,  246,   83,
      244,  433,  251,  250,   80,   80,  433,   83,  252,   80,
       83,  247,   83,  248,  249,   83,   80,   83,  259,  245,
       80,   83,  253,   80,  254,   80,  255,  433,  251,  250,

      433,  257,  433,  258,  252,   80,   83,   83,  256,  433,
      260,   83,   80,  262,  261,  259,  433,   80,   83,  253,
       80,  254,   83,  255,  433,   83,  263,   83,  257,  258,
      264,  265,   80,  433,  256,   80,  260,   83,  266,  262,
       80,  261,   80,   80,   83,   80,  268,   80,   80,   83,
      433,  270,   83,  263,  433,  271,  264,  267,  265,  269,
       80,  273,   80,  433,   83,  266,   80,   83,  272,   80,
      274,   80,   83,  268,   83,   83,   80,   83,  270,   83,
       83,  275,  271,  267,   80,  281,  269,  279,  273,  278,
       80,  276,   83,  280,   83,  272,  274,  433,   83,   80,

       80,   83,   80,   83,  433,   80,   80,  275,   83,   80,
      282,   80,  281,  286,  279,  278,   83,  276,   80,  283,
      280,  284,   83,  433,   80,  288,   80,  289,  285,   80,
      433,   83,   83,  287,   83,   80,  282,   83,   83,  433,
      286,   83,  433,   83,  290,  283,  294,  284,  292,  291,
       83,  288,   80,  289,   80,  285,   83,  433,   83,  287,
       80,   83,  293,   80,   80,   80,   80,   83,  433,   80,
      290,   80,  294,  296,  292,  291,   80,  433,  295,  297,
      299,  433,  302,  433,   83,  304,   83,  298,  301,  293,
       80,  300,   83,   80,  433,   83,   83,   83,   83,   80,

      296,   83,   80,   83,  295,  297,  433,  299,   83,  302,
       80,  304,  303,  298,  301,  308,  306,  300,   80,  305,
       80,  433,   83,   80,  433,   83,  309,   80,  433,   80,
      307,   83,  433,  310,   83,   80,   80,  312,  303,   80,
       80,  308,   83,  306,  433,  305,  313,   80,  315,  314,
       83,   80,   83,  309,   80,   83,  307,  318,   80,   83,
      310,   83,   80,  433,  312,  433,  321,   83,   83,  317,
       80,   83,   83,  313,  316,  315,  314,   80,   80,   83,
       80,   80,  433,   83,  318,   80,   83,  319,   80,  322,
       83,  320,  325,  321,   83,  317,   80,   80,  323,   80,

      316,  324,   83,  326,   80,   80,  433,   80,  433,   83,
       83,  328,   83,   83,  319,  322,   80,   83,  320,  325,
       83,  327,   80,   80,   80,  323,  329,  324,   83,   83,
      326,   83,   80,  333,   80,  331,   83,   83,  328,   83,
      332,   80,   80,   80,   80,  330,   80,  327,   83,  433,
       80,   80,  329,  433,   83,   83,   83,   80,   80,   80,
      333,  331,  433,   80,   83,   80,   83,  332,  334,  339,
       80,  330,  335,   83,   83,   83,   83,   80,   83,  336,
      337,  338,   83,   83,   80,   80,  433,  340,   80,   83,
       83,   83,  341,  433,  334,   83,  339,   83,  335,  342,

      344,  343,   83,  345,   80,  336,  337,  338,   80,   83,
       80,   80,   80,  340,   80,   80,   83,   83,  341,  433,
       83,  347,   80,   80,  433,  342,  346,  344,  343,  345,
      348,   80,  349,  354,   80,  351,   83,  433,  350,  352,
       83,   80,   83,   83,   83,  433,   83,   83,  347,   80,
       80,  353,  346,   80,   83,   83,  348,   80,  349,   80,
      354,  351,  433,   83,  350,  352,   83,  355,   80,  357,
       80,  356,   80,   83,   80,  361,   80,  353,  359,   80,
      363,   83,   83,  362,  433,   83,  360,  365,   80,   83,
      358,   83,   80,   80,  355,  357,  366,  433,  356,   80,

       83,  361,   83,  364,   83,  359,   83,  363,   83,  362,
       80,   83,   80,  360,  365,  367,  358,   80,   80,  370,
       83,   80,   80,  366,   83,   83,   80,  433,  433,  364,
      372,   83,   80,   80,  368,  433,  369,   80,   80,   80,
      371,  367,   83,   80,   83,  376,  370,  377,   80,   83,
       83,  373,   80,   83,   83,   80,  375,  372,   83,  374,
      368,  379,  369,   80,   83,   83,  371,   80,  378,   83,
       83,   83,  376,  380,  377,   83,   80,  373,   80,  382,
       83,   80,  375,   80,   83,  374,  433,   83,  379,   80,
      381,   80,  383,  385,  378,   83,  433,  388,   80,   83,

      380,   80,   80,  433,  433,  382,  384,   80,   83,  386,
       83,  389,   80,   83,   80,   83,  390,  381,   80,  383,
      385,   83,  387,   83,  388,   80,  391,   80,   80,  392,
       83,  393,  384,   83,   83,  386,  394,  395,  389,   83,
       80,  433,   80,  390,   83,   80,   83,  396,  387,  397,
       83,   80,  391,   80,  433,  433,  392,   83,  393,   83,
       83,  399,  394,   80,  395,  398,   80,   80,   80,   80,
       80,   80,   83,  396,   83,  433,  397,   83,  433,  400,
      402,  405,  433,   83,   80,   83,  401,  399,  403,   80,
       80,  398,  404,  433,  433,   83,  408,   80,   83,   83,

       83,   83,   83,   83,  407,  400,   80,  402,  405,   80,
       80,  433,  401,  406,  403,   80,   83,  409,  404,   80,
      433,   83,   83,  408,   80,  411,   80,  433,  412,   83,
      407,   80,  413,   80,  410,   80,   80,  415,   83,  406,
       80,   83,   83,  414,  409,   80,  416,   83,  433,   80,
      433,   83,  411,  417,  412,   80,   83,  418,   83,  413,
      410,   80,   80,   83,  415,   83,   80,   83,   83,  419,
      414,   80,   83,  416,   80,  420,  433,   83,   80,  433,
      417,   83,  421,   80,  418,   80,  422,   83,   80,   80,
      423,  427,  433,   83,   83,  425,  419,  424,   83,   80,

       80,   80,  420,   83,  433,  433,   83,   80,  421,  429,
       83,  426,  422,  433,  428,   83,  423,   83,  427,  430,
       83,   83,  425,  424,   80,  431,  433,  433,  433,  433,
      432,   83,   83,   83,  433,  433,  429,  426,  433,   83,
      428,  433,  433,  433,  433,  430,  433,  433,  433,  433,
      433,  431,  433,  433,  433,  433,   83,  432,   58,   58,
       60,   60,   63,   63,   67,   67,   70,   70,   11,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433
    } ;

static const flex_int16_t yy_chk[1746] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    6,   16,   17,
       20,   28,   35,   29,   17,   29,   28,    5,    6,   36,
       38,   40,   16,   39,   41,   62,   42,   40,   62,   44,

       38,   67,   42,   76,   35,   76,   67,   46,   80,   36,
       38,  240,   39,  440,   35,   43,   40,  439,   20,   41,
       39,   36,   38,   40,   40,   39,   41,   38,   42,   42,
       35,   44,   46,   43,   43,   36,   38,  240,   39,   46,
       80,  120,   40,   16,   37,   41,   39,   43,   45,   47,
       37,  277,   81,   50,   83,   47,   75,   72,   46,   43,
       43,   37,   45,   70,   37,   66,   37,   92,   45,   37,
      121,   47,   64,   48,   47,   50,   37,   37,  277,   60,
       45,   47,   47,   48,   81,   50,   83,   37,   84,   45,
       37,   92,   37,   48,   45,   37,   51,   47,   49,   92,

       47,   50,  121,   82,   49,   48,   51,   58,   84,   56,
       48,   82,   49,   34,   85,   86,   51,   92,   49,   48,
       84,   86,   87,   85,   33,   82,   32,   19,   51,   11,
       49,   49,    4,   51,   84,   82,   85,   85,   82,   49,
       87,   87,   51,   88,   49,   89,   85,   86,   86,   90,
       85,   82,   91,   88,   87,   89,   94,   95,   96,   91,
       90,   93,   85,   85,   96,    3,   87,   87,    0,  101,
       90,   97,    0,   94,    0,   88,   95,   89,    0,   97,
       88,   90,   89,   98,   91,   93,   91,   90,   94,   95,
       96,   96,  101,   93,  107,  103,   90,  100,    0,   94,

       99,  101,   95,   97,   98,  104,   97,  100,   99,    0,
      102,   93,  107,    0,   99,   98,  105,  103,  101,  104,
      102,  109,    0,  105,    0,  104,  107,  103,  108,  100,
       98,  106,   99,  167,  100,   99,  112,  104,  107,    0,
      109,   99,  102,  103,    0,  108,  104,  102,  105,    0,
      105,  104,  106,  109,  106,  106,  113,  110,  112,    0,
      108,  111,    0,  106,  110,  167,  109,  111,  112,  122,
      113,  108,    0,  123,    0,  124,  125,    0,  106,  126,
      106,  106,  122,  123,  112,  126,  125,    0,  113,  110,
        0,  110,  124,  111,  111,  127,  128,  113,  130,  129,

      131,  122,    0,    0,  132,  123,  131,  124,  125,  122,
      123,  126,  126,  125,    0,  127,    0,    0,  124,  128,
      129,  130,  130,  132,  133,  135,  189,  127,  128,    0,
      130,  129,  131,  131,  133,  134,  132,  138,  204,  144,
      136,  127,  135,  137,  139,  128,  129,  130,  130,  132,
      136,  140,  139,  137,    0,  134,  133,  135,  189,  145,
      138,  133,  142,  144,  141,  143,  146,  134,  135,  138,
      204,  144,  136,  140,  141,  137,  139,  136,  145,  139,
      137,  134,  143,  140,  142,  147,  138,  148,    0,  144,
      146,  145,    0,  148,  142,  149,  141,  143,  146,  140,

      150,  141,  152,  210,  145,    0,  151,    0,  143,  153,
      142,  147,  152,    0,  149,    0,  146,  147,    0,  148,
      148,  149,  154,  151,  150,  155,  159,  149,  157,  156,
      158,    0,  150,  153,  152,  210,    0,  147,  151,  152,
      149,  153,  154,  156,  161,  159,  155,  149,  157,  151,
      150,  162,  158,  161,  154,  160,  164,  155,  159,  153,
      157,  156,  158,  163,  160,  162,  164,  165,  154,  160,
      156,  159,  155,  166,  157,  163,  161,  218,  158,  168,
      161,  166,  169,  162,    0,  170,  165,  160,  164,  168,
      174,  160,  162,  164,  173,  163,  160,  172,  174,  165,

      175,  171,  163,  176,  169,  166,  177,    0,  166,  218,
      170,  168,  165,  176,  169,  171,  168,  170,  173,  172,
      178,  179,  174,  175,  221,  174,  173,  224,  177,  172,
      169,  186,  175,  171,  180,  176,  170,  181,  177,  178,
      176,  179,  171,    0,  173,  172,  181,  183,  180,  175,
      182,  184,  178,  179,  177,  186,  221,  188,  187,  224,
      185,  183,  190,  186,  230,  178,  180,  179,    0,  181,
      190,    0,  182,  181,  185,  180,  184,  188,  191,  183,
      187,  186,  182,  184,  191,  192,  193,  195,  183,  188,
      187,  194,  185,  195,  190,  192,  230,  190,  182,  196,

      193,  185,  184,  188,  198,    0,  187,  202,    0,    0,
      191,  191,  201,  202,  197,  194,  199,  192,  193,  195,
      195,  196,  192,  194,  197,  206,  198,  193,  200,    0,
      199,  196,  203,    0,  209,  201,  198,  205,  200,  202,
      202,  194,  206,  203,  201,  239,  197,  196,  207,    0,
      208,  197,  198,  211,  207,  212,  208,  206,  209,  213,
      200,  201,  199,  205,  203,  200,  209,    0,  206,  205,
      203,    0,  212,  211,  217,  248,    0,  239,  213,  216,
      207,  207,  208,  208,  209,  211,  214,  212,  217,  205,
      219,  213,  214,  222,  214,  215,  214,    0,  212,  211,

        0,  215,    0,  216,  213,  220,  217,  248,  214,    0,
      219,  216,  225,  222,  220,  217,    0,  226,  214,  214,
      223,  214,  219,  214,    0,  222,  223,  215,  215,  216,
      225,  226,  227,    0,  214,  228,  219,  220,  227,  222,
      229,  220,  232,  233,  225,  231,  229,  235,  236,  226,
        0,  232,  223,  223,    0,  233,  225,  228,  226,  231,
      234,  235,  237,    0,  227,  227,  241,  228,  234,  238,
      236,  244,  229,  229,  232,  233,  242,  231,  232,  235,
      236,  237,  233,  228,  243,  244,  231,  242,  235,  241,
      245,  238,  234,  243,  237,  234,  236,    0,  241,  246,

      252,  238,  247,  244,    0,  253,  250,  237,  242,  251,
      245,  257,  244,  250,  242,  241,  243,  238,  249,  246,
      243,  247,  245,    0,  254,  252,  258,  253,  249,  255,
        0,  246,  252,  251,  247,  260,  245,  253,  250,    0,
      250,  251,    0,  257,  254,  246,  258,  247,  255,  254,
      249,  252,  256,  253,  259,  249,  254,    0,  258,  251,
      262,  255,  256,  261,  269,  263,  264,  260,    0,  265,
      254,  266,  258,  261,  255,  254,  267,    0,  259,  262,
      264,    0,  267,    0,  256,  269,  259,  263,  266,  256,
      268,  265,  262,  273,    0,  261,  269,  263,  264,  270,

      261,  265,  271,  266,  259,  262,    0,  264,  267,  267,
      272,  269,  268,  263,  266,  273,  271,  265,  274,  270,
      276,    0,  268,  282,    0,  273,  274,  275,    0,  278,
      272,  270,    0,  275,  271,  283,  279,  278,  268,  280,
      281,  273,  272,  271,    0,  270,  279,  285,  281,  280,
      274,  286,  276,  274,  284,  282,  272,  286,  289,  275,
      275,  278,  294,    0,  278,    0,  289,  283,  279,  285,
      290,  280,  281,  279,  284,  281,  280,  292,  297,  285,
      293,  287,    0,  286,  286,  288,  284,  287,  291,  290,
      289,  288,  293,  289,  294,  285,  300,  295,  291,  296,

      284,  292,  290,  295,  299,  298,    0,  301,    0,  292,
      297,  298,  293,  287,  287,  290,  303,  288,  288,  293,
      291,  296,  302,  305,  306,  291,  299,  292,  300,  295,
      295,  296,  307,  306,  304,  303,  299,  298,  298,  301,
      304,  308,  316,  309,  317,  302,  327,  296,  303,    0,
      310,  330,  299,    0,  302,  305,  306,  312,  313,  314,
      306,  303,    0,  315,  307,  318,  304,  304,  309,  315,
      319,  302,  310,  308,  316,  309,  317,  320,  327,  312,
      313,  314,  310,  330,  323,  322,    0,  318,  321,  312,
      313,  314,  319,    0,  309,  315,  315,  318,  310,  320,

      322,  321,  319,  323,  324,  312,  313,  314,  326,  320,
      328,  325,  335,  318,  329,  331,  323,  322,  319,    0,
      321,  325,  332,  334,    0,  320,  324,  322,  321,  323,
      326,  333,  328,  334,  340,  331,  324,    0,  329,  332,
      326,  342,  328,  325,  335,    0,  329,  331,  325,  338,
      344,  333,  324,  336,  332,  334,  326,  337,  328,  345,
      334,  331,    0,  333,  329,  332,  340,  336,  339,  338,
      341,  337,  343,  342,  346,  344,  347,  333,  341,  348,
      346,  338,  344,  345,    0,  336,  343,  348,  349,  337,
      339,  345,  352,  350,  336,  338,  349,    0,  337,  353,

      339,  344,  341,  347,  343,  341,  346,  346,  347,  345,
      351,  348,  355,  343,  348,  350,  339,  354,  356,  355,
      349,  357,  358,  349,  352,  350,  359,    0,    0,  347,
      358,  353,  364,  360,  351,    0,  354,  361,  363,  362,
      356,  350,  351,  365,  355,  362,  355,  363,  366,  354,
      356,  359,  371,  357,  358,  369,  361,  358,  359,  360,
      351,  366,  354,  376,  364,  360,  356,  367,  365,  361,
      363,  362,  362,  367,  363,  365,  368,  359,  370,  369,
      366,  372,  361,  373,  371,  360,    0,  369,  366,  374,
      368,  377,  370,  373,  365,  376,    0,  377,  375,  367,

      367,  378,  379,    0,    0,  369,  372,  380,  368,  374,
      370,  378,  388,  372,  383,  373,  379,  368,  381,  370,
      373,  374,  375,  377,  377,  382,  380,  384,  385,  381,
      375,  382,  372,  378,  379,  374,  383,  384,  378,  380,
      386,    0,  389,  379,  388,  387,  383,  385,  375,  386,
      381,  393,  380,  390,    0,    0,  381,  382,  382,  384,
      385,  389,  383,  391,  384,  387,  392,  394,  396,  395,
      398,  397,  386,  385,  389,    0,  386,  387,    0,  390,
      392,  397,    0,  393,  400,  390,  391,  389,  395,  399,
      401,  387,  396,    0,    0,  391,  401,  407,  392,  394,

      396,  395,  398,  397,  400,  390,  405,  392,  397,  402,
      403,    0,  391,  399,  395,  411,  400,  402,  396,  404,
        0,  399,  401,  401,  412,  404,  406,    0,  405,  407,
      400,  409,  406,  413,  403,  408,  416,  409,  405,  399,
      410,  402,  403,  408,  402,  414,  410,  411,    0,  415,
        0,  404,  404,  414,  405,  417,  412,  415,  406,  406,
      403,  418,  419,  409,  409,  413,  420,  408,  416,  417,
      408,  421,  410,  410,  424,  418,    0,  414,  422,    0,
      414,  415,  419,  426,  415,  423,  420,  417,  425,  427,
      421,  426,    0,  418,  419,  423,  417,  422,  420,  428,

      429,  430,  418,  421,    0,    0,  424,  432,  419,  428,
      422,  425,  420,    0,  427,  426,  421,  423,  426,  429,
      425,  427,  423,  422,  431,  430,    0,    0,    0,    0,
      431,  428,  429,  430,    0,    0,  428,  425,    0,  432,
      427,    0,    0,    0,    0,  429,    0,    0,    0,    0,
        0,  430,    0,    0,    0,    0,  431,  431,  434,  434,
      435,  435,  436,  436,  437,  437,  438,  438,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[96] =
    {   0,
0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexico.l"
/*
Area 1. Deficiones
*/
#line 11 "lexico.l"

#include <cstdlib>
#include <string>
#include "parser.h"
#include <QString>
#include <stdio.h>
#include <iostream>
#include <errores.h>
#include "nodoast.h"
#include "qdebug.h"

#include "qlist.h"

//funcion que realiza el analizador lexico
int yylex();
//errores lexicos
void yyerror(const char *s);
 int linea=1;//para contar lineas
int columna=1;//para contar columnas
int anterior=0;
 NodoAST *raiz;

 extern QList <Errores> *listaLexico=new QList<Errores>();



//metodo para imprimir en consola
 void imprimirEnConsola(const char *mensaje, const char *tkn){

         std::cout << mensaje <<" : "<<tkn <<std::endl;

 }

#line 1039 "scanner.cpp"
/*indica a flex que no distinga mayusculas o minusculas*/
/*Espresiones regulares*/

#line 1043 "scanner.cpp"

#define INITIAL 0
#define COM 1
#define COMM 2
#define STR 3
#define STR1 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 71 "lexico.l"




#line 1267 "scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 434 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1669 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 75 "lexico.l"

	YY_BREAK

case 2:
YY_RULE_SETUP
#line 77 "lexico.l"
{  BEGIN COM; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "lexico.l"
{ BEGIN COMM; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 82 "lexico.l"
{/* ignore white space*/}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 85 "lexico.l"
{columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 87 "lexico.l"
{linea++; columna=0;anterior=0;}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 91 "lexico.l"
{imprimirEnConsola("caracter",yytext);
             std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return cha;}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 94 "lexico.l"
{imprimirEnConsola("cadena",yytext);
             std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return str;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "lexico.l"
{imprimirEnConsola("numero",yytext);
                std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return numero;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "lexico.l"
{imprimirEnConsola("decimal",yytext);
                 std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return decimal;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 107 "lexico.l"
{imprimirEnConsola("punto",yytext);
                std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return punto;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "lexico.l"
{imprimirEnConsola("entero",yytext);
                std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return entero;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "lexico.l"
{imprimirEnConsola("doble",yytext);
                std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return doble;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 117 "lexico.l"
{imprimirEnConsola("cadena",yytext);
               std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return cadena;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 120 "lexico.l"
{imprimirEnConsola("caracter",yytext);
               std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return caracter;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 124 "lexico.l"
{imprimirEnConsola("booleano",yytext);
                     std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return boolean;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 127 "lexico.l"
{imprimirEnConsola("verdadero",yytext);
                    std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return verdadero;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 130 "lexico.l"
{imprimirEnConsola("falso",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return falso;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "lexico.l"
{imprimirEnConsola("comparar",yytext);
            std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return comparar;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 137 "lexico.l"
{imprimirEnConsola("diferencia",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return diferencia;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 140 "lexico.l"
{imprimirEnConsola("menorQ",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return menorQ;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 143 "lexico.l"
{imprimirEnConsola("menorIgual",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return menorIgual;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 146 "lexico.l"
{imprimirEnConsola("mayorQ",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return mayorQ;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 149 "lexico.l"
{imprimirEnConsola("mayorIgual",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return mayorIgual;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 153 "lexico.l"
{imprimirEnConsola("Or",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return Or;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 156 "lexico.l"
{imprimirEnConsola("And",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return And;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 159 "lexico.l"
{imprimirEnConsola("Nand",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return Nand;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 162 "lexico.l"
{imprimirEnConsola("diferencia",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return Not;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 165 "lexico.l"
{imprimirEnConsola("Nor",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return Nor;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 170 "lexico.l"
{imprimirEnConsola("suma",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return suma;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 173 "lexico.l"
{imprimirEnConsola("resta",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return resta;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 176 "lexico.l"
{imprimirEnConsola("multiplicacion",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return multiplicacion;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 179 "lexico.l"
{imprimirEnConsola("division",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return division;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 182 "lexico.l"
{imprimirEnConsola("potencia",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return potencia;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 185 "lexico.l"
{imprimirEnConsola("parentesisAbre",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return parA;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 188 "lexico.l"
{imprimirEnConsola("parentesisCierrra",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return parC;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 194 "lexico.l"
{imprimirEnConsola("fin_Sentencia",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return final;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 197 "lexico.l"
{imprimirEnConsola("LLaveAbre",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return llaveA;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 200 "lexico.l"
{imprimirEnConsola("LLaveCierra",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return llaveC;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 205 "lexico.l"
{imprimirEnConsola("igual",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return igual;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 208 "lexico.l"
{imprimirEnConsola("coma",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return coma;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 211 "lexico.l"
{imprimirEnConsola("puntoComa",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return puntoComa;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 216 "lexico.l"
{imprimirEnConsola("arreglo",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return arreglo;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 219 "lexico.l"
{imprimirEnConsola("CorcheteAbre",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return corA;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 222 "lexico.l"
{imprimirEnConsola("CorcheteCierra",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return corC;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 228 "lexico.l"
{imprimirEnConsola("setencia_si",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return si;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 231 "lexico.l"
{imprimirEnConsola("Sentencia_SINOSI",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return SinoSi;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 234 "lexico.l"
{imprimirEnConsola("Sentencia Sino",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return sino;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 239 "lexico.l"
{imprimirEnConsola("sentencia Para",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return para;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 243 "lexico.l"
{imprimirEnConsola("sentencia repetir",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return repetir;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 247 "lexico.l"
{imprimirEnConsola("sentencia mientras",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return mientras;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 253 "lexico.l"
{imprimirEnConsola("sentencia hacer",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return hacer;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 258 "lexico.l"
{imprimirEnConsola("sentencia_comprobar",yytext);std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return comprobar;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 260 "lexico.l"
{imprimirEnConsola("sentencia_salir",yytext);  std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return salir;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 262 "lexico.l"
{imprimirEnConsola("sentencia_caso",yytext); std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return caso;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 264 "lexico.l"
{imprimirEnConsola("sentencia_defecto",yytext); std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return defecto;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 266 "lexico.l"
{imprimirEnConsola("DosPunto",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return dosPunto;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 271 "lexico.l"
{imprimirEnConsola("sentencia_romper",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return romper;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 274 "lexico.l"
{imprimirEnConsola("sentencia_continuar",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return continuar;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 280 "lexico.l"
{imprimirEnConsola("sentencia_archivo",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return archivo;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 283 "lexico.l"
{imprimirEnConsola("sentencia_crearArchivo",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return crearDer;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 286 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return crearConjunto;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 289 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return crearRegex;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 292 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return crearEntrada;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 295 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return guardarA;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 299 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return cuenta;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 302 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return crearC;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 305 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return verCuenta;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 308 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return depCuenta;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 311 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return resCuenta;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 314 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return imprimirCuenta;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 317 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return conCuenta;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 320 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return transferir;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 326 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return clase;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 329 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return extender;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 332 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return principal;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 335 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return nuevo;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 338 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return sobrescribir;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 342 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return publico;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 345 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return privado;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 348 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return protegido;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 353 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return voide;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 356 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return Retornar;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 362 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return incluir;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 365 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return imprimir;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 368 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return notificar;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 371 "lexico.l"
{imprimirEnConsola("Reconocido",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return funcion;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 378 "lexico.l"
{imprimirEnConsola("identificador",yytext);
         std::cout<<yytext<<std::endl;  columna=columna+anterior;  anterior=strlen(yytext);    strcpy(yylval.TEXT,yytext); return Id;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 382 "lexico.l"
{imprimirEnConsola("ERROR",yytext);
                Errores  *nuevo=new Errores(yytext,"Error Lexico","Token Desconocido",linea,columna);
               std::cout<<"Error léxico, no se esperaba token:"<<yytext<<" en la linea:"<<linea<<std::endl;

            }
	YY_BREAK

case 90:
YY_RULE_SETUP
#line 390 "lexico.l"
{ BEGIN INITIAL; }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 391 "lexico.l"
{linea++;};
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 392 "lexico.l"

	YY_BREAK
case YY_STATE_EOF(COMM):
#line 393 "lexico.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 394 "lexico.l"
{ linea++; columna = 0; BEGIN INITIAL; };
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 395 "lexico.l"

	YY_BREAK
case 95:
YY_RULE_SETUP
#line 401 "lexico.l"
ECHO;
	YY_BREAK
#line 1902 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COM):
case YY_STATE_EOF(STR):
case YY_STATE_EOF(STR1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 434 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 434 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 433);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 401 "lexico.l"






